// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id String @id @default(uuid())
  name String
  description String?
  ownerId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members TeamMember[]
  invites TeamInvite[]
  rooms Room[]
}

model TeamInvite {
  id String @id @default(uuid())
  teamId String
  code String @unique
  createdById String
  team Team @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMember {
  id String @id @default(uuid())
  teamId String
  team Team @relation(fields: [teamId], references: [id])
  userId Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id String @id @default(uuid())
  name String
  description String?
  teamId String
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  devices Device[]
  surveys Survey[]
}

model Device {
  device_id String @id
  name String?
  description String?
  model String?
  firmwareVersion String?
  isPaired Boolean @default(false)
  lastSeenAt DateTime?
  roomId String?
  room Room? @relation(fields: [roomId], references: [id])
  pairedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id          String           @id @default(uuid())
  title       String
  active      Boolean          @default(true)
  roomId      String
  room        Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdById Int
  responses   SurveyResponse[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   Json             @default("[{\"id\":\"comfort\",\"text\":\"How do you feel about the indoor climate?\"},{\"id\":\"suggestions\",\"text\":\"Do you have any suggestions for improvement?\"}]")

  @@index([roomId])
  @@index([createdById])
}

model SurveyResponse {
  id        String   @id @default(uuid())
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  rating    Int      @default(0)
  comment   String?  @db.Text
  answers   Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([surveyId])
}


 